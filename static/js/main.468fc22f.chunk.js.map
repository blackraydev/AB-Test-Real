{"version":3,"sources":["constants/cellTypes.ts","helpers/convertToDate.ts","constants/reduxActions.ts","constants/colors.ts","constants/apiUrl.ts","services/userServices.ts","store/Users/actions.ts","UI/Button/styles.ts","constants/cellModes.ts","UI/Button/index.tsx","UI/LoadingSpinner/styles.ts","UI/LoadingSpinner/index.tsx","helpers/addDotToDate.ts","constants/months.ts","helpers/getDateIndicators.ts","helpers/convertDateToSendReques.ts","helpers/getDateByIndicators.ts","helpers/isDateIndicatorsValid.ts","helpers/isDateValid.ts","hooks/usePrevious.ts","store/Users/selectors.ts","components/GridCell/styles.ts","components/GridCell/index.tsx","components/UsersGrid/styles.ts","components/UsersGrid/index.tsx","services/metricsServices.ts","store/Metrics/actions.ts","store/actions.ts","store/Metrics/selectors.ts","components/RollingRetentionModal/styles.ts","UI/Modal/styles.ts","UI/Modal/index.tsx","components/RollingRetentionModal/index.tsx","pages/MainPage/styles.ts","pages/MainPage/index.tsx","hooks/useActions.ts","store/Users/index.ts","store/Metrics/index.ts","store/index.ts","App.tsx","index.tsx"],"names":["CellTypes","ACTIONS","convertToDate","value","date","Date","days","getDate","toString","month","getMonth","years","getFullYear","length","Colors","API_URL_PROD","UserServices","axios","get","users","post","requestData","type","USERS_REQUEST_DATA","receiveData","payload","USERS_RECEIVE_DATA","rejectData","USERS_REJECT_DATA","requestEnd","USERS_REQUEST_END","getUsers","dispatch","a","response","data","console","log","saveUsers","CellModes","Button","styled","button","BUTTON","WHITE","BUTTON_HOVER","BUTTON_DISABLED","styles","onClick","disabled","LoadingSpinner","div","MonthNames","getDateIndicators","Error","dateIndicators","split","day","year","convertDateToSendRequest","getDateByIndicators","setHours","setMinutes","setSeconds","setMilliseconds","setDate","Number","setMonth","setFullYear","isDateIndicatorsValid","isDateValid","registrationDateIndicators","lastActivityDateIndicators","registrationDate","lastActivityDate","usePrevious","ref","useRef","useEffect","current","usersSelector","state","usersReducer","usersLoadingSelector","isLoading","usersErrorSelector","hasError","GridCell","FONT","header","css","CELL_HOVER","GridCellValue","p","lightText","LIGHT_TEXT","GridCellInput","input","small","setSelectedUser","id","useState","READ","cellMode","setCellMode","cellValue","setCellValue","prevCellValue","useDispatch","useSelector","isCellDateValid","DATE_REGISTRATION","find","user","userId","dateLastActivity","DATE_LAST_ACTIVITY","dateRegistration","some","e","selectUserHandler","WRITE","onChange","addDotToDate","target","onBlur","newUsers","map","USER_ID","onKeyPress","key","preventDefault","maxLength","autoFocus","GridWrapper","Grid","BOX_SHADOW","GridRow","GridDataWrapper","LoadingSpinnerWrapper","ErrorText","UsersGrid","sort","prevUser","push","MetricsServices","METRICS_REQUEST_DATA","METRICS_RECEIVE_DATA","METRICS_REJECT_DATA","METRICS_REQUEST_END","calculateMetrics","getUsersLifeTime","lifeTimeResponse","lifeTime","getRollingRetention","rollingRetentionResponse","rollingRetention","usersActions","metricsActions","metricsRollingRetentionSelector","metricsReducer","metricsLifeTimeSelector","metricsLoadingSelector","ChartWrapper","RollingRetentionText","Months","JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER","ModalWrapper","Modal","children","onClose","RollingRetentionModal","lifetime","chartData","useMemo","forEach","index","width","height","chartType","loader","options","chart","title","PageWrapper","MAIN_BG","ContentWrapper","ButtonsWrapper","MainPage","bindActionCreators","appActions","useActions","selectedUser","modalVisible","setModalVisible","prevSelectedUser","marginTop","filter","background","RED","LIGHT_RED","initialState","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.468fc22f.chunk.js","sourcesContent":["export enum CellTypes {\n  USER_ID = 'USER_ID',\n  DATE_REGISTRATION = 'DATE_REGISTRATION',\n  DATE_LAST_ACTIVITY = 'DATE_LAST_ACTIVITY',\n}\n","export const convertToDate = (value: string): string => {\n  const date: Date = new Date(value);\n\n  let days: string = date.getDate().toString();\n  let month: string = (date.getMonth() + 1).toString();\n  let years: number = date.getFullYear();\n\n  if (days.length === 1) days = '0' + days;\n  if (month.length === 1) month = '0' + month;\n\n  return `${days}.${month}.${years}`;\n};\n","export enum ACTIONS {\n  USERS_REQUEST_DATA = 'USERS_REQUEST_DATA',\n  USERS_REQUEST_END = 'USERS_REQUEST_END',\n  USERS_RECEIVE_DATA = 'USERS_RECEIVE_DATA',\n  USERS_REJECT_DATA = 'USERS_REJECT_DATA',\n  METRICS_REQUEST_DATA = 'METRICS_REQUEST_DATA',\n  METRICS_REQUEST_END = 'METRICS_REQUEST_END',\n  METRICS_RECEIVE_DATA = 'METRICS_RECEIVE_DATA',\n  METRICS_REJECT_DATA = 'METRICS_REJECT_DATA',\n}\n","export enum Colors {\n  FONT = 'rgb(93, 109, 151)',\n  WHITE = '#FFF',\n  BOX_SHADOW = 'rgba(93, 109, 151, 0.1)',\n  MAIN_BG = '#F9F9F9',\n  BUTTON = '#4A9DFF',\n  BUTTON_HOVER = 'rgb(87, 170, 255)',\n  BUTTON_DISABLED = 'rgba(74, 157, 255, 0.27)',\n  CELL_HOVER = 'rgb(235, 235, 240)',\n  LIGHT_TEXT = 'rgba(93, 109, 151, 0.5)',\n  RED = 'red',\n  LIGHT_RED = 'rgb(251, 172, 168)',\n}\n","export const API_URL_DEV = 'https://localhost:5001/api';\nexport const API_URL_PROD = 'https://ab-test-real-backend.herokuapp.com/api';\n","import axios, { AxiosResponse } from 'axios';\nimport { API_URL_DEV, API_URL_PROD } from '../constants/apiUrl';\nimport { IUser } from '../models/IUser';\n\nclass UserServices {\n  static async getUsers(): Promise<AxiosResponse<IUser[]>> {\n    return await axios.get<IUser[]>(`${API_URL_PROD}/users`);\n  }\n\n  static async saveUsers(users: IUser[]): Promise<AxiosResponse<IUser[]>> {\n    return await axios.post<IUser[]>(`${API_URL_PROD}/users/save_users`, users);\n  }\n}\n\nexport default UserServices;\n","import { Dispatch } from 'redux';\nimport { ACTIONS } from '../../constants/reduxActions';\nimport { IUser } from '../../models/IUser';\nimport UserServices from '../../services/userServices';\n\nexport const getUsers =\n  () =>\n  async (dispatch: Dispatch): Promise<void> => {\n    try {\n      dispatch(requestData());\n\n      const response = await UserServices.getUsers();\n      const data = response.data;\n\n      dispatch(receiveData({ users: data }));\n      dispatch(requestEnd());\n    } catch (e) {\n      console.log(e);\n      dispatch(rejectData());\n    }\n  };\n\nexport const saveUsers =\n  (users: IUser[]) =>\n  async (dispatch: Dispatch): Promise<void> => {\n    try {\n      dispatch(requestData());\n\n      const response = await UserServices.saveUsers(users);\n      const data = response.data;\n\n      dispatch(receiveData({ users: data }));\n      dispatch(requestEnd());\n    } catch (e) {\n      console.log(e);\n      dispatch(rejectData());\n    }\n  };\n\nexport const requestData = () => ({\n  type: ACTIONS.USERS_REQUEST_DATA,\n});\n\nexport const receiveData = (payload: any) => ({\n  type: ACTIONS.USERS_RECEIVE_DATA,\n  payload: payload,\n});\n\nexport const rejectData = () => ({\n  type: ACTIONS.USERS_REJECT_DATA,\n});\n\nexport const requestEnd = () => ({\n  type: ACTIONS.USERS_REQUEST_END,\n});\n\nexport default {\n  getUsers,\n  saveUsers,\n};\n","import styled, { CSSObject } from 'styled-components';\nimport { Colors } from '../../constants/colors';\n\ninterface IButtonStyleProps {\n  styles?: CSSObject;\n}\n\nexport const Button = styled.button<IButtonStyleProps>`\n  cursor: pointer;\n  transition: 0.2s;\n  width: 189px;\n  height: 38px;\n  background: ${Colors.BUTTON};\n  color: ${Colors.WHITE};\n  font-size: 14px;\n  font-weight: 400;\n  border-radius: 10px;\n\n  &:hover {\n    background: ${Colors.BUTTON_HOVER};\n  }\n\n  &:disabled {\n    background: ${Colors.BUTTON_DISABLED};\n  }\n\n  ${({ styles }) => styles}\n`;\n","export enum CellModes {\n  READ = 'READ',\n  WRITE = 'WRITE',\n}\n","import React from 'react';\nimport { CSSObject } from 'styled-components';\nimport * as UI from './styles';\n\ninterface IButtonProps {\n  value: string;\n  onClick: () => void;\n  disabled?: boolean;\n  styles?: CSSObject;\n}\n\nconst Button: React.FC<IButtonProps> = ({ value, onClick, disabled, styles }) => {\n  return (\n    <UI.Button onClick={onClick} disabled={disabled} styles={styles}>\n      {value}\n    </UI.Button>\n  );\n};\n\nexport default Button;\n","import styled from 'styled-components';\nimport { Colors } from '../../constants/colors';\n\nexport const LoadingSpinner = styled.div`\n  color: ${Colors.BUTTON};\n  font-size: 20px;\n  width: 1.05em;\n  height: 1.05em;\n  border-radius: 50%;\n  animation: load 1.7s infinite ease, round 1.7s infinite ease;\n\n  @keyframes load {\n    0% {\n      box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em,\n        0 -0.83em 0 -0.477em;\n    }\n    5%,\n    95% {\n      box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em,\n        0 -0.83em 0 -0.477em;\n    }\n    10%,\n    59% {\n      box-shadow: 0 -0.83em 0 -0.4em, -0.087em -0.825em 0 -0.42em, -0.173em -0.812em 0 -0.44em,\n        -0.256em -0.789em 0 -0.46em, -0.297em -0.775em 0 -0.477em;\n    }\n    20% {\n      box-shadow: 0 -0.83em 0 -0.4em, -0.338em -0.758em 0 -0.42em, -0.555em -0.617em 0 -0.44em,\n        -0.671em -0.488em 0 -0.46em, -0.749em -0.34em 0 -0.477em;\n    }\n    38% {\n      box-shadow: 0 -0.83em 0 -0.4em, -0.377em -0.74em 0 -0.42em, -0.645em -0.522em 0 -0.44em,\n        -0.775em -0.297em 0 -0.46em, -0.82em -0.09em 0 -0.477em;\n    }\n    100% {\n      box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em,\n        0 -0.83em 0 -0.477em;\n    }\n  }\n\n  @keyframes round {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import React from 'react';\nimport * as UI from './styles';\n\nconst LoadingSpinner = () => {\n  return <UI.LoadingSpinner />;\n};\n\nexport default LoadingSpinner;\n","export const addDotToDate = (value: string): string => {\n  if (!value.length) return '';\n\n  if (value.length === 2 || value.length === 5) {\n    value += '.';\n  }\n\n  return value;\n};\n","export enum MonthNames {\n  JANUARY = 'January',\n  FEBRUARY = 'February',\n  MARCH = 'March',\n  APRIL = 'April',\n  MAY = 'May',\n  JUNE = 'June',\n  JULY = 'July',\n  AUGUST = 'August',\n  SEPTEMBER = 'September',\n  OCTOBER = 'October',\n  NOVEMBER = 'November',\n  DECEMBER = 'December',\n}\n\nexport const Months = [\n  MonthNames.JANUARY,\n  MonthNames.FEBRUARY,\n  MonthNames.MARCH,\n  MonthNames.APRIL,\n  MonthNames.MAY,\n  MonthNames.JUNE,\n  MonthNames.JULY,\n  MonthNames.AUGUST,\n  MonthNames.SEPTEMBER,\n  MonthNames.OCTOBER,\n  MonthNames.NOVEMBER,\n  MonthNames.DECEMBER,\n];\n","import { IDateIndicators } from '../models/IDateIndicators';\n\nexport const getDateIndicators = (date: string): IDateIndicators => {\n  if (date.length !== 10) throw new Error('Invalid Date Indicators');\n\n  const dateIndicators = date.split('.');\n\n  const day = dateIndicators[0];\n  const month = dateIndicators[1];\n  const year = dateIndicators[2];\n\n  return { day, month, year };\n};\n","import { getDateIndicators } from './getDateIndicators';\n\nexport const convertDateToSendRequest = (date: string) => {\n  const { day, month, year } = getDateIndicators(date);\n  return `${year}-${month}-${day}`;\n};\n","import { IDateIndicators } from '../models/IDateIndicators';\n\nexport const getDateByIndicators = (dateIndicators: IDateIndicators): Date => {\n  const date = new Date();\n\n  date.setHours(0);\n  date.setMinutes(0);\n  date.setSeconds(0);\n  date.setMilliseconds(0);\n  date.setDate(Number(dateIndicators.day));\n  date.setMonth(Number(dateIndicators.month) - 1);\n  date.setFullYear(Number(dateIndicators.year));\n\n  return date;\n};\n","import { IDateIndicators } from '../models/IDateIndicators';\n\nexport const isDateIndicatorsValid = (dateIndicators: IDateIndicators): boolean => {\n  if (Number(dateIndicators.day) === 0 || Number(dateIndicators.day) > 31) return false;\n  if (Number(dateIndicators.month) === 0 || Number(dateIndicators.month) > 12) return false;\n  if (Number(dateIndicators.year) === 0 || Number(dateIndicators.year) < 2000) return false;\n  return true;\n};\n","import { IDateIndicators } from '../models/IDateIndicators';\nimport { getDateByIndicators } from './getDateByIndicators';\nimport { isDateIndicatorsValid } from './isDateIndicatorsValid';\n\nexport const isDateValid = (\n  registrationDateIndicators?: IDateIndicators,\n  lastActivityDateIndicators?: IDateIndicators\n): boolean => {\n  let date;\n\n  if (registrationDateIndicators && isDateIndicatorsValid(registrationDateIndicators)) {\n    date = getDateByIndicators(registrationDateIndicators);\n  } else if (lastActivityDateIndicators && isDateIndicatorsValid(lastActivityDateIndicators)) {\n    date = getDateByIndicators(lastActivityDateIndicators);\n  } else if (\n    (registrationDateIndicators && !isDateIndicatorsValid(registrationDateIndicators)) ||\n    (lastActivityDateIndicators && !isDateIndicatorsValid(lastActivityDateIndicators))\n  ) {\n    return false;\n  }\n\n  if (registrationDateIndicators && lastActivityDateIndicators) {\n    const registrationDate = getDateByIndicators(registrationDateIndicators);\n    const lastActivityDate = getDateByIndicators(lastActivityDateIndicators);\n\n    if (registrationDate > lastActivityDate) return false;\n    else if (registrationDate > new Date()) return false;\n    else if (lastActivityDate > new Date()) return false;\n  }\n\n  return true;\n};\n","import { useEffect, useRef } from 'react';\n\ntype refType<T> = {\n  current: T | any;\n};\n\nexport const usePrevious = <T>(value: T) => {\n  const ref: refType<T> = useRef();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n};\n","import { IReduxState } from '..';\n\nexport const usersSelector = (state: IReduxState) => state.usersReducer.users;\nexport const usersLoadingSelector = (state: IReduxState) => state.usersReducer.isLoading;\nexport const usersErrorSelector = (state: IReduxState) => state.usersReducer.hasError;\n","import styled, { css } from 'styled-components';\nimport { Colors } from '../../constants/colors';\n\ninterface IGridCellStyleProps {\n  header?: boolean;\n  small?: boolean;\n  lightText?: boolean;\n}\n\nexport const GridCell = styled.div<IGridCellStyleProps>`\n  transition: 0.2s;\n  justify-self: center;\n  align-self: center;\n  color: ${Colors.FONT};\n  font-size: 14px;\n  font-weight: ${({ header }) => (header ? 400 : 300)};\n\n  ${({ header }) =>\n    !header &&\n    css`\n      cursor: pointer;\n      &:hover {\n        background: ${Colors.CELL_HOVER};\n      }\n    `}\n`;\n\nexport const GridCellValue = styled.p<IGridCellStyleProps>`\n  padding: 17px 40px;\n\n  ${({ lightText }) =>\n    lightText &&\n    css`\n      color: ${Colors.LIGHT_TEXT};\n    `}\n`;\n\nexport const GridCellInput = styled.input<IGridCellStyleProps>`\n  font-size: 14px;\n  font-weight: 400;\n  width: 90px;\n  margin: 8px 30px;\n  padding: 8px 0;\n  padding-left: 9px;\n  border-radius: 10px;\n  border: 1px solid ${Colors.CELL_HOVER};\n\n  ${({ small }) =>\n    small &&\n    css`\n      width: 35px;\n      margin: 8px 27px;\n      padding-left: 5px;\n    `}\n`;\n","import React, { useState, Dispatch, SetStateAction } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CellModes } from '../../constants/cellModes';\nimport { CellTypes } from '../../constants/cellTypes';\nimport { addDotToDate } from '../../helpers/addDotToDate';\nimport { convertDateToSendRequest } from '../../helpers/convertDateToSendReques';\nimport { convertToDate } from '../../helpers/convertToDate';\nimport { getDateIndicators } from '../../helpers/getDateIndicators';\nimport { isDateValid } from '../../helpers/isDateValid';\nimport { usePrevious } from '../../hooks/usePrevious';\nimport { receiveData } from '../../store/Users/actions';\nimport { usersSelector } from '../../store/Users/selectors';\nimport { CellMode } from '../../types/cellMode';\nimport { CellType } from '../../types/cellType';\nimport * as UI from './styles';\n\ninterface IGridCellProps {\n  value: string;\n  setSelectedUser?: Dispatch<SetStateAction<number>>;\n  header?: boolean;\n  small?: boolean;\n  type?: CellType;\n  id?: number;\n}\n\nconst GridCell: React.FC<IGridCellProps> = ({ setSelectedUser, value, header, small, type, id }) => {\n  const [cellMode, setCellMode] = useState<CellMode>(CellModes.READ);\n  const [cellValue, setCellValue] = useState<string>(value);\n  const prevCellValue = usePrevious<string>(cellValue);\n  const dispatch = useDispatch();\n  const users = useSelector(usersSelector);\n\n  const cellClickHandler = () => {\n    if (!header) {\n      selectUserHandler();\n      setCellMode(CellModes.WRITE);\n    }\n  };\n\n  const cellBlurHandler = () => {\n    setSelectedUser && setSelectedUser(-1);\n    setCellMode(CellModes.READ);\n\n    if (cellValue === value) return;\n\n    if (!isCellDateValid()) {\n      return setCellValue(value);\n    }\n\n    const newUsers = users.map((user) => {\n      if (user.userId === id) {\n        if (type === CellTypes.USER_ID) user.userId = Number(cellValue);\n        if (type === CellTypes.DATE_REGISTRATION) user.dateRegistration = convertDateToSendRequest(cellValue);\n        if (type === CellTypes.DATE_LAST_ACTIVITY) user.dateLastActivity = convertDateToSendRequest(cellValue);\n      }\n      return user;\n    });\n\n    return dispatch(receiveData({ users: newUsers }));\n  };\n\n  const cellChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!small && prevCellValue.length < cellValue.length) {\n      setCellValue(addDotToDate(e.target.value));\n    } else {\n      setCellValue(e.target.value);\n    }\n  };\n\n  const cellKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (Number(e.key) >= 0 || Number(e.key) <= 9) {\n      return true;\n    }\n    return e.preventDefault();\n  };\n\n  const isCellDateValid = () => {\n    try {\n      if (type === CellTypes.DATE_REGISTRATION) {\n        const registrationDate = cellValue;\n        const lastActivityDate = users.find((user) => user.userId === id)?.dateLastActivity;\n\n        const registrationDateIndicators = getDateIndicators(registrationDate);\n\n        if (lastActivityDate) {\n          const lastActivityDateIndicators = getDateIndicators(convertToDate(lastActivityDate));\n          return isDateValid(registrationDateIndicators, lastActivityDateIndicators);\n        } else {\n          return isDateValid(registrationDateIndicators);\n        }\n      } else if (type === CellTypes.DATE_LAST_ACTIVITY) {\n        const lastActivityDate = cellValue;\n        const registrationDate = users.find((user) => user.userId === id)?.dateRegistration;\n\n        const lastActivityDateIndicators = getDateIndicators(lastActivityDate);\n\n        if (registrationDate) {\n          const registrationDateIndicators = getDateIndicators(convertToDate(registrationDate));\n          return isDateValid(registrationDateIndicators, lastActivityDateIndicators);\n        } else {\n          return isDateValid(lastActivityDateIndicators);\n        }\n      } else {\n        const userId = Number(cellValue);\n        const isExists = users.some((user) => user.userId === userId);\n\n        if (isExists) return false;\n\n        return true;\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const selectUserHandler = () => {\n    id && setSelectedUser && setSelectedUser(id);\n  };\n\n  return (\n    <UI.GridCell onClick={cellClickHandler} header={header}>\n      {cellMode === CellModes.READ ? (\n        <UI.GridCellValue lightText={!cellValue}>{cellValue ? cellValue : 'Empty'}</UI.GridCellValue>\n      ) : (\n        <UI.GridCellInput\n          value={cellValue}\n          onChange={cellChangeHandler}\n          onBlur={cellBlurHandler}\n          onKeyPress={cellKeyPressHandler}\n          maxLength={small ? 4 : 10}\n          small={small}\n          autoFocus\n        />\n      )}\n    </UI.GridCell>\n  );\n};\n\nexport default GridCell;\n","import styled from 'styled-components';\nimport { Colors } from '../../constants/colors';\n\nexport const GridWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n`;\n\nexport const Grid = styled.div`\n  overflow: hidden;\n  display: grid;\n  grid-template-columns: 1fr;\n  background: ${Colors.WHITE};\n  border-radius: 10px;\n  box-shadow: 4px 0px 10px ${Colors.BOX_SHADOW};\n  margin-bottom: 20px;\n`;\n\nexport const GridRow = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1.75fr 1.75fr;\n  width: 100%;\n  padding: 0 40px;\n  border-bottom: 0.5px solid rgba(93, 110, 151, 0.4);\n`;\n\nexport const GridDataWrapper = styled.div`\n  overflow: scroll;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: repeat(7, 51px);\n  min-height: 354px;\n  max-height: 354px;\n  background: ${Colors.WHITE};\n\n  -ms-overflow-style: none;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nexport const LoadingSpinnerWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const ErrorText = styled.p`\n  position: absolute;\n  color: red;\n  top: -35px;\n`;\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { CellTypes } from '../../constants/cellTypes';\nimport { convertToDate } from '../../helpers/convertToDate';\nimport { IUser } from '../../models/IUser';\nimport { receiveData } from '../../store/Users/actions';\nimport Button from '../../UI/Button';\nimport LoadingSpinner from '../../UI/LoadingSpinner';\nimport GridCell from '../GridCell';\nimport * as UI from './styles';\n\ninterface IUsersGrid {\n  users: IUser[];\n  isLoading: boolean;\n  hasError: boolean;\n  setSelectedUser: Dispatch<SetStateAction<number>>;\n}\n\nconst UsersGrid: React.FC<IUsersGrid> = ({ users, isLoading, hasError, setSelectedUser }) => {\n  const dispatch = useDispatch();\n\n  const addNewUserHandler = () => {\n    const lastUserId = users[users.length - 1].userId;\n\n    const user: IUser = {\n      userId: lastUserId + 1,\n      dateRegistration: '',\n      dateLastActivity: '',\n    };\n\n    const newUsers = [...users];\n    newUsers.push(user);\n\n    dispatch(receiveData({ users: newUsers }));\n  };\n\n  return (\n    <UI.GridWrapper>\n      {hasError && <UI.ErrorText>Error: There is no connection to the server!</UI.ErrorText>}\n      <UI.Grid>\n        <UI.GridRow>\n          <GridCell value={'UserID'} header small />\n          <GridCell value={'Date Registration'} header />\n          <GridCell value={'Date Last Activity'} header />\n        </UI.GridRow>\n        <UI.GridDataWrapper>\n          {!isLoading && users ? (\n            users\n              .sort((prevUser, user) => prevUser.userId - user.userId)\n              .map((user) => (\n                <UI.GridRow key={`${user.userId}_${user.dateRegistration}_${user.dateLastActivity}`}>\n                  <GridCell\n                    setSelectedUser={setSelectedUser}\n                    type={CellTypes.USER_ID}\n                    id={user.userId}\n                    value={user.userId.toString()}\n                    small\n                  />\n                  <GridCell\n                    setSelectedUser={setSelectedUser}\n                    type={CellTypes.DATE_REGISTRATION}\n                    id={user.userId}\n                    value={user.dateRegistration ? convertToDate(user.dateRegistration) : user.dateRegistration}\n                  />\n                  <GridCell\n                    setSelectedUser={setSelectedUser}\n                    type={CellTypes.DATE_LAST_ACTIVITY}\n                    id={user.userId}\n                    value={user.dateLastActivity ? convertToDate(user.dateLastActivity) : user.dateLastActivity}\n                  />\n                </UI.GridRow>\n              ))\n          ) : (\n            <UI.LoadingSpinnerWrapper>\n              <LoadingSpinner />\n            </UI.LoadingSpinnerWrapper>\n          )}\n        </UI.GridDataWrapper>\n      </UI.Grid>\n      <Button value=\"Add new user\" onClick={addNewUserHandler} disabled={isLoading} />\n    </UI.GridWrapper>\n  );\n};\n\nexport default UsersGrid;\n","import axios, { AxiosResponse } from 'axios';\nimport { API_URL_DEV, API_URL_PROD } from '../constants/apiUrl';\n\nclass MetricsServices {\n  static async getUsersLifeTime(): Promise<AxiosResponse<void>> {\n    return await axios.get(`${API_URL_PROD}/metrics/lifetime`);\n  }\n\n  static async getRollingRetention(): Promise<AxiosResponse<void>> {\n    return await axios.get(`${API_URL_PROD}/metrics/calculate`);\n  }\n}\n\nexport default MetricsServices;\n","import { Dispatch } from 'redux';\nimport { ACTIONS } from '../../constants/reduxActions';\nimport MetricsServices from '../../services/metricsServices';\n\nexport const calculateMetrics =\n  () =>\n  async (dispatch: Dispatch): Promise<void> => {\n    try {\n      dispatch(requestData());\n\n      const lifeTimeResponse = await MetricsServices.getUsersLifeTime();\n      const lifeTime = lifeTimeResponse.data;\n\n      const rollingRetentionResponse = await MetricsServices.getRollingRetention();\n      const rollingRetention = rollingRetentionResponse.data;\n\n      dispatch(receiveData({ lifeTime, rollingRetention }));\n      dispatch(requestEnd());\n    } catch (e) {\n      console.log(e);\n      dispatch(rejectData());\n    }\n  };\n\nexport const requestData = () => ({\n  type: ACTIONS.METRICS_REQUEST_DATA,\n});\n\nexport const receiveData = (payload: any) => ({\n  type: ACTIONS.METRICS_RECEIVE_DATA,\n  payload: payload,\n});\n\nexport const rejectData = () => ({\n  type: ACTIONS.METRICS_REJECT_DATA,\n});\n\nexport const requestEnd = () => ({\n  type: ACTIONS.METRICS_REQUEST_END,\n});\n\nexport default {\n  calculateMetrics,\n};\n","import usersActions from './Users/actions';\nimport metricsActions from './Metrics/actions';\n\nexport default {\n  ...usersActions,\n  ...metricsActions,\n};\n","import { IReduxState } from '..';\n\nexport const metricsRollingRetentionSelector = (state: IReduxState) => state.metricsReducer.rollingRetention;\nexport const metricsLifeTimeSelector = (state: IReduxState) => state.metricsReducer.lifeTime;\nexport const metricsLoadingSelector = (state: IReduxState) => state.metricsReducer.isLoading;\nexport const metricsErrorSelector = (state: IReduxState) => state.metricsReducer.hasError;\n","import styled from 'styled-components';\nimport { Colors } from '../../constants/colors';\n\nexport const ChartWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const RollingRetentionText = styled.p`\n  font-size: 16px;\n  color: ${Colors.FONT};\n  margin-bottom: 15px;\n`;\n","import styled from 'styled-components';\nimport { Colors } from '../../constants/colors';\n\nexport const ModalWrapper = styled.div`\n  cursor: pointer;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 100;\n`;\n\nexport const Modal = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 25px;\n  border-radius: 15px;\n  background: ${Colors.WHITE};\n`;\n","import React from 'react';\nimport * as UI from './styles';\n\ninterface IModalProps {\n  children: React.ReactNode | React.ReactNode[];\n  onClose: () => void;\n}\n\nconst Modal: React.FC<IModalProps> = ({ children, onClose }) => {\n  return (\n    <UI.ModalWrapper onClick={onClose}>\n      <UI.Modal>{children}</UI.Modal>\n    </UI.ModalWrapper>\n  );\n};\n\nexport default Modal;\n","import React, { useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Chart } from 'react-google-charts';\nimport {\n  metricsLifeTimeSelector,\n  metricsLoadingSelector,\n  metricsRollingRetentionSelector,\n} from '../../store/Metrics/selectors';\nimport * as UI from './styles';\nimport LoadingSpinner from '../../UI/LoadingSpinner';\nimport { Months } from '../../constants/months';\nimport Modal from '../../UI/Modal';\n\ninterface IRollingRetentionModalProps {\n  onClose: () => void;\n}\n\nconst RollingRetentionModal: React.FC<IRollingRetentionModalProps> = ({ onClose }) => {\n  const rollingRetention = useSelector(metricsRollingRetentionSelector);\n  const lifetime = useSelector(metricsLifeTimeSelector);\n  const isLoading = useSelector(metricsLoadingSelector);\n\n  const chartData = useMemo(() => {\n    const data: [[month: string, lifetime: string | number]] = [['Months', 'LifeTime']];\n    lifetime && lifetime.forEach((value, index) => data.push([Months[index], value]));\n    return data;\n  }, [lifetime]);\n\n  return (\n    <Modal onClose={onClose}>\n      {isLoading ? (\n        <LoadingSpinner />\n      ) : (\n        <UI.ChartWrapper>\n          <UI.RollingRetentionText>Rolling Retention 7 Day: {rollingRetention}%</UI.RollingRetentionText>\n          <Chart\n            width={'1000px'}\n            height={'500px'}\n            chartType=\"Bar\"\n            loader={<LoadingSpinner />}\n            data={chartData}\n            options={{\n              chart: {\n                title: 'Users Lifetime, 2021',\n              },\n            }}\n          />\n        </UI.ChartWrapper>\n      )}\n    </Modal>\n  );\n};\n\nexport default RollingRetentionModal;\n","import styled from 'styled-components';\nimport { Colors } from '../../constants/colors';\n\nexport const PageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  width: 100%;\n  background: ${Colors.MAIN_BG};\n`;\n\nexport const ContentWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const ButtonsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-left: 20px;\n  width: 100%:\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport UsersGrid from '../../components/UsersGrid';\nimport { Colors } from '../../constants/colors';\nimport { useActions } from '../../hooks/useActions';\nimport { usePrevious } from '../../hooks/usePrevious';\nimport { receiveData } from '../../store/Users/actions';\nimport { usersErrorSelector, usersLoadingSelector, usersSelector } from '../../store/Users/selectors';\nimport RollingRetentionModal from '../../components/RollingRetentionModal';\nimport Button from '../../UI/Button';\nimport * as UI from './styles';\n\nconst MainPage: React.FC = () => {\n  const { getUsers, saveUsers, calculateMetrics } = useActions();\n\n  const dispatch = useDispatch();\n\n  const users = useSelector(usersSelector);\n  const isLoading = useSelector(usersLoadingSelector);\n  const hasError = useSelector(usersErrorSelector);\n\n  const [selectedUser, setSelectedUser] = useState<number>(-1);\n  const [modalVisible, setModalVisible] = useState<boolean>(false);\n\n  const prevSelectedUser = usePrevious<number>(selectedUser);\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  const saveDataHandler = () => {\n    if (!isLoading) {\n      saveUsers(users);\n    }\n  };\n\n  const calculateDataHandler = () => {\n    if (!isLoading) {\n      calculateMetrics();\n      setModalVisible(true);\n    }\n  };\n\n  const deleteRowHandler = () => {\n    if (prevSelectedUser > -1) {\n      const newUsers = [...users].filter((user) => user.userId !== prevSelectedUser);\n      dispatch(receiveData({ users: newUsers }));\n    }\n\n    setSelectedUser(-1);\n  };\n\n  return (\n    <UI.PageWrapper>\n      <UI.ContentWrapper>\n        <UsersGrid users={users} isLoading={isLoading} hasError={hasError} setSelectedUser={setSelectedUser} />\n        <UI.ButtonsWrapper>\n          <Button value=\"Save\" onClick={saveDataHandler} disabled={hasError} />\n          <Button\n            value=\"Calculate\"\n            onClick={calculateDataHandler}\n            styles={{ marginTop: '15px' }}\n            disabled={users && !users.length}\n          />\n          <Button\n            value=\"Delete user\"\n            onClick={deleteRowHandler}\n            styles={{\n              marginTop: '15px',\n              background: Colors.RED,\n              ':hover': { background: Colors.RED },\n              ':disabled': { background: Colors.LIGHT_RED },\n            }}\n            disabled={selectedUser < 0 && prevSelectedUser < 0}\n          />\n        </UI.ButtonsWrapper>\n        {modalVisible && <RollingRetentionModal onClose={() => setModalVisible(false)} />}\n      </UI.ContentWrapper>\n    </UI.PageWrapper>\n  );\n};\n\nexport default MainPage;\n","import { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport appActions from '../store/actions';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n  return bindActionCreators(appActions, dispatch);\n};\n","import { ACTIONS } from '../../constants/reduxActions';\nimport { IUser } from '../../models/IUser';\nimport { GAction } from '../../types/reduxTypes';\n\ninterface IUsersState {\n  users: IUser[];\n  isLoading: boolean;\n  hasError: boolean;\n}\n\nconst initialState: IUsersState = {\n  users: [] as IUser[],\n  isLoading: false,\n  hasError: false,\n};\n\ntype Action =\n  | GAction<ACTIONS.USERS_REQUEST_DATA | ACTIONS.USERS_REQUEST_END | ACTIONS.USERS_REJECT_DATA>\n  | GAction<ACTIONS.USERS_RECEIVE_DATA, { users: IUser[] }>;\n\nexport default (state = initialState, action: Action): IUsersState => {\n  switch (action.type) {\n    case ACTIONS.USERS_REQUEST_DATA:\n      return { ...state, isLoading: true };\n    case ACTIONS.USERS_RECEIVE_DATA:\n      return { ...state, users: action.payload.users };\n    case ACTIONS.USERS_REJECT_DATA:\n      return { ...state, isLoading: false, hasError: true };\n    case ACTIONS.USERS_REQUEST_END:\n      return { ...state, isLoading: false, hasError: false };\n    default:\n      return state;\n  }\n};\n","import { ACTIONS } from '../../constants/reduxActions';\nimport { GAction } from '../../types/reduxTypes';\n\ninterface IMetricsState {\n  rollingRetention: number;\n  lifeTime: number[];\n  isLoading: boolean;\n  hasError: boolean;\n}\n\nconst initialState: IMetricsState = {\n  rollingRetention: 0,\n  lifeTime: [] as number[],\n  isLoading: false,\n  hasError: false,\n};\n\ntype Action =\n  | GAction<ACTIONS.METRICS_REQUEST_DATA | ACTIONS.METRICS_REQUEST_END | ACTIONS.METRICS_REJECT_DATA>\n  | GAction<ACTIONS.METRICS_RECEIVE_DATA, { rollingRetention: number; lifeTime: number[] }>;\n\nexport default (state = initialState, action: Action): IMetricsState => {\n  switch (action.type) {\n    case ACTIONS.METRICS_REQUEST_DATA:\n      return { ...state, isLoading: true };\n    case ACTIONS.METRICS_RECEIVE_DATA:\n      return { ...state, rollingRetention: action.payload.rollingRetention, lifeTime: action.payload.lifeTime };\n    case ACTIONS.METRICS_REJECT_DATA:\n      return { ...state, isLoading: false, hasError: true };\n    case ACTIONS.METRICS_REQUEST_END:\n      return { ...state, isLoading: false, hasError: false };\n    default:\n      return state;\n  }\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport usersReducer from './Users';\nimport metricsReducer from './Metrics';\n\nconst reducers = combineReducers({\n  usersReducer,\n  metricsReducer,\n});\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nexport default store;\n\nexport type IReduxState = ReturnType<typeof reducers>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport MainPage from './pages/MainPage';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <MainPage />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}